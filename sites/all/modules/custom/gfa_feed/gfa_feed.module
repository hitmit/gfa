<?php

// Include PHPSpreadsheet with composer autoloader.
require drupal_get_path('module', 'gfa_adjustments') . '/vendor/autoload.php';
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);
include drupal_get_path('module', 'gfa_adjustments') . '/vendor/phpoffice/phpexcel/Classes/PHPExcel/IOFactory.php';


/**
 * Implements hook_menu()
 * @return mixed
 */

function gfa_feed_menu() {
    $items['upload/%'] = array(
        'title' => 'Upload',
        'title callback' => 'page_title',
        'page arguments' => array(1),
        'page callback' => 'gfa_feed_page',
        'access arguments' => array('access content'),
    );

    return $items;
}

function page_title(){
    //pass uploader name to page title
    return strtoupper(arg(1)) . " Upload";
}

/**
 * Implements hook_theme()
 */
function gfa_feed_theme($existing, $type, $theme, $path) {

    return array(
        'default_upload' => array(
            'template' => 'templates/default-upload',
        ),
    );

}


function gfa_feed_page() {
    return theme('default_upload');
}

/**
 * - This function handles the importing to the node and field collection
 * - FCUID and UID in the csv need to be unique, UID corresponds to the node
 * - FCUID is the field collection unique ID
 *
 * @param $importer_id
 * @param $fid
 */
function import_csv($importer_id, $fid) {

    if(isset($fid)){

        $f = file_load($fid);
        $docroot = $_SERVER['DOCUMENT_ROOT'];
        $f = $docroot . "/sites/default/files/csv_files/" . $f->filename;

        $feedSource = feeds_source($importer_id);
        $config = $feedSource->getConfig();
        $config['FeedsFileFetcher']['source'] = $f;
        $feedSource->setConfig($config);
        $feedSource->save();

        while (FEEDS_BATCH_COMPLETE != $feedSource->import()) ;
    }

}

/**
 * Implements hook_form()
 * - Generate a form so that the user can upload their CSV file
 * - It is then passed into the import_csv() function
 */
function gfa_feed_document_add_form($form, &$form_state) {
    $doc_id = variable_get('document_variable_name');
    $form['doc_file'] = array(
        '#title' => t('Upload the document'),
        '#type' => 'managed_file',
        '#description' => t('Supports only .xls files'),
        '#upload_location' => 'public://csv_files/',
        '#upload_validators' => array(
            'file_validate_extensions' => array('xls'),
        ),
    );

    $form['document_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#submit' => array('gfa_feed_document_submit'),
    );
    return $form;
}

/**
 * @param $importer
 * -- Compare the imported file header to the header to which its being imported to
 */
function import_header($importer, $fid){

//get the fields listed for an importer
$field = 'field_'.$importer;
$info = field_info_instances('field_collection_item', $field);

//sort the fields by their correct weight
uasort($info, function($a, $b) {
    $a_weight = (is_array($a) && isset($a['widget']['weight'])) ? $a['widget']['weight'] : 0;
    $b_weight = (is_array($b) && isset($b['widget']['weight'])) ? $b['widget']['weight'] : 0;

    if ($a_weight == $b_weight) {
        return 0;
    }

    return ($a_weight < $b_weight) ? -1 : 1;
});

//get all the field header labels and put it into an array for comparison
foreach($info as $field){
    $arr[] = $field['label'];
}

//dpm($arr);
$xls = read_xls($fid);
$compare = array_diff($arr, $xls['header'][1]);
$size = count($compare);

if($size > 2) {
    return false;
} else {
    //these are two extra fields that are allowable in the array
    if(in_array('Downloaded',$compare) && in_array('FCUID',$compare)){
        return true;
    } else {
        return false;
    }
}

}

function read_xls($fid){
    //instantiate php reader
    $objReader = new PHPExcel_Reader_Excel5();
    $objReader->setReadDataOnly(true);
    //load the file ID of the recently uploaded file
    $f = file_load($fid);

    $docroot = $_SERVER['DOCUMENT_ROOT'];

//    $f = 'F:/Sites/gfa_dev/mnat.xls';
    $f = $docroot . "/sites/default/files/csv_files/" . $f->filename;

    $check = file_exists($f);

    //if file exists get all headers and put it into an array
    if($check) {

        $inputFileType = 'Excel5';
        $inputFileType = PHPExcel_IOFactory::identify($f);
        $objReader = PHPExcel_IOFactory::createReader($inputFileType);
        $objPHPExcel = $objReader->load($f);

        $cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
        //extract to a PHP readable array format
        foreach ($cell_collection as $cell) {
            $column = $objPHPExcel->getActiveSheet()->getCell($cell)->getColumn();
            $row = $objPHPExcel->getActiveSheet()->getCell($cell)->getRow();
            $data_value = $objPHPExcel->getActiveSheet()->getCell($cell)->getValue();
            //header will/should be in row 1 only. of course this can be modified to suit your need.
            if ($row == 1) {
                $header[$row][$column] = $data_value;
            } else {
                $arr_data[$row][$column] = $data_value;
            }
        }
        //send the data in an array format
        $data['header'] = $header;
        $data['values'] = $arr_data;

        return $data;

    }
}

/**
 * Implements hook_form_submit()
 * - Remove old file
 * - Save new file into the database
 * - Callback to import_csv() to perform the import
 */
function gfa_feed_document_submit($form, $form_state) {
    if (isset($form_state['values']['doc_file'])) {
        //remove existing document while clicking remove button
        if ($form_state['values']['doc_file'] == 0) {
            //get existing file id to delete
            $document_exist_id = variable_get('document_variable_name');
            $document_exist_file = file_load($document_exist);
            if (!empty($document_exist_file)) {
                //delete file usage
                file_usage_delete($document_exist_file, 'gfa_feed', '', $document_exist_id);
                // The file_delete() function takes a file object and checks to see if
                // the file is being used by any other modules. If it is the delete
                // operation is canceled, otherwise the file is deleted.
                file_delete($document_exist_file, TRUE);
                drupal_set_message(t('Old document removed.'));
            }
        } else {
            //adding document
            $current_document = file_load($form_state['values']['doc_file']);
            if (!empty($current_document->fid)) {
                //get currently uploaded file id
                $file_id = $current_document->fid;
                //setting file id to its variable
                variable_set('document_variable_name', $file_id);
                file_usage_add($current_document, 'gfa_feed', '', $file_id);
                //make file status as permanent
                $current_document->status = FILE_STATUS_PERMANENT;
                $fid = $current_document->fid;
                ddl($fid);
                //pass the URL second argument bc its the uploader name and also the field name we should be checking
                //the header against

                $check = import_header(arg(1),$fid);
                ddl($check);
                if($check){
                    file_save($current_document);

                    switch(arg(1)){
                        case "mnat":
                            $uploader = "cpa_mnat";
                            break;
                        case "cparn":
                            $uploader = "cparn";
                            break;
                        case "cparf":
                            $uploader = "cparf";
                            break;
                        case "shbp":
                            $uploader = "shbp";
                            break;
                        case "cpag":
                            $uploader = "cpag";
                            break;
                        case "ppa":
                            $uploader = "ppa";
                            break;
                        case "pppece":
                            $uploader = "pppece";
                            break;
                    }
                    import_csv($uploader, $fid);
                    drupal_set_message("Documents uploaded successfully.");
                } else {
                    form_set_error('error','The file has been rejected, please upload the correct file');
                }

            }
        }
    }
}

/**
 * Implements hook_form()
 * Generate a form to switch between upload csv types.
 */
function adj_select_form($form, &$form_state) {
    $form = array();

    $options = array(
        'mnat' => 'CPA - MB2 Net Accrual TV',
        'cparn' => 'CPA - RADAR Net Accrual TV',
        'cparf' => 'CPA - RADAR Format GFA',
        'cpag' => 'Current Period Accruals - GFA',
        'ppa' => 'Prior Period Adjustments',
        'pppece' => 'Prior Period PE to CE',
        'shbp' => 'SHB Perdiem'
    );
    $form['adjtype'] = array(
        '#attributes' => array('id' => array('arg2')),
        '#type' => 'select',
        '#title' => t('Adjustment type'),
        '#description' => t('Choose the export form type.'),
        '#default_value' => arg(1),
        '#options' => $options
    );
    $form['submit']     = array(
        '#type' => 'submit',
        '#value' => t('Apply')
    );
    return $form;
}

/**
 * Adjtype select form submit function.
 */
function adj_select_form_submit($form, &$form_state) {
    $adjtype = $form_state['values']['adjtype'];
    drupal_goto('/upload/' . $adjtype);
}


function gfa_feed_feeds_presave($source, $entity, $item, $entity_id) {
//dpm($item);
    if(empty($entity->field_fmno['und'][0]['value'])){
        drupal_set_message("FMNO field is required");
        $entity->feeds_item->skip = TRUE;
        $entity->field_fcuid['und'][0]['value'] = $entity->feeds_item->hash;
    }

    if(empty($item['FMNO'])){
        drupal_set_message("ITEM FMNO REquired");
    }

}
