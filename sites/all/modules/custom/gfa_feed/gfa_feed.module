<?php

// Include PHPSpreadsheet with composer autoloader.
require drupal_get_path('module', 'feeds_xls') . '/PHPExcel/Classes/PHPExcel/IOFactory.php';

/**
 * Implements hook_menu()
 * @return mixed
 */

function gfa_feed_menu() {
    $items['upload/%'] = array(
        'title' => 'Upload',
        'title callback' => 'page_title',
        'page arguments' => array(1),
        'page callback' => 'gfa_feed_page',
        'access arguments' => array('access content'),
        '#process' => array('gfa_feed_upload_process'),

    );

    return $items;
}

function page_title(){
    //pass uploader name to page title
    return strtoupper(arg(1)) . " Upload";
}

/**
 * Implements hook_theme()
 */
function gfa_feed_theme($existing, $type, $theme, $path) {

    return array(
        'default_upload' => array(
            'template' => 'templates/default-upload',
        ),
    );

}


function gfa_feed_page() {
    return theme('default_upload');
}

/**
 * - This function handles the importing to the node and field collection
 * - FCUID and UID in the csv need to be unique, UID corresponds to the node
 * - FCUID is the field collection unique ID
 *
 * @param $importer_id
 * @param $fid
 */
function import_csv($importer_id, $fid) {

    if(isset($fid)){

        $f = file_load($fid);
        $docroot = $_SERVER['DOCUMENT_ROOT'];
        $f = $docroot . "/media-services/gfa/sites/default/files/csv_files/" . $f->filename;
//        dpm($f);
        $feedSource = feeds_source($importer_id);
        $config = $feedSource->getConfig();
        $config['FeedsFileFetcher']['source'] = $f;
        $feedSource->setConfig($config);
        $feedSource->save();

        while (FEEDS_BATCH_COMPLETE != $feedSource->import()) ;
    }

}

/**
 * Implements hook_form()
 * - Generate a form so that the user can upload their CSV file
 * - It is then passed into the import_csv() function
 */
function gfa_feed_document_add_form($form, &$form_state) {
    $doc_id = variable_get('document_variable_name');
    $form['download'] = array(
        '#markup' => '<a href="/import/'.arg(1).'/xlstemplate">Click here to download ' . arg(1) . ' template file.</a>',

    );
    $form['doc_file'] = array(
        '#title' => t('Upload the document'),
        '#type' => 'managed_file',
        '#description' => t('Supports only .xls files'),
        '#default_value' => isset($doc_id) ? $doc_id : NULL,
        '#upload_location' => 'public://csv_files/',
        '#upload_validators' => array(
            'file_validate_extensions' => array('xls'),
        ),
    );



    $form['document_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#submit' => array('gfa_feed_document_submit'),
    );
    return $form;
}

/**
 * @param $importer
 * -- Compare the imported file header to the header to which its being imported to
 */
function import_header($importer, $fid){

//get the fields listed for an importer
$field = 'field_'.$importer;
$info = field_info_instances('field_collection_item', $field);

//sort the fields by their correct weight
uasort($info, function($a, $b) {
    $a_weight = (is_array($a) && isset($a['widget']['weight'])) ? $a['widget']['weight'] : 0;
    $b_weight = (is_array($b) && isset($b['widget']['weight'])) ? $b['widget']['weight'] : 0;

    if ($a_weight == $b_weight) {
        return 0;
    }

    return ($a_weight < $b_weight) ? -1 : 1;
});

//get all the field header labels and put it into an array for comparison
foreach($info as $field){
    $arr[] = $field['label'];
}


$xls = read_xls($fid);
dpm($xls);
$compare = array_diff($arr, $xls['header'][1]);
dpm($compare);
$size = count($compare);

if($size > 2) {
    drupal_set_message('<strong>The following headers do not match, please fix them and re-upload</strong>');
    foreach($compare as $c){
        if($c !== "Downloaded" || $c !== "FCUID"){

            drupal_set_message($c);
        }
    }
    return false;
} else {
    //these are two extra fields that are allowable in the array
    if(in_array('Downloaded',$compare) || in_array('FCUID',$compare)){
        return true;
    } else {
        return false;
    }
}

}

function read_xls($fid){
    //instantiate php reader
    $objReader = new PHPExcel_Reader_Excel5();
    $objReader->setReadDataOnly(true);
    //load the file ID of the recently uploaded file
    $f = file_load($fid);

    $docroot = $_SERVER['DOCUMENT_ROOT'];

    $f = $docroot . "/media-services/gfa/sites/default/files/csv_files/" . $f->filename;
dpm($f);
    $check = file_exists($f);
    //if file exists get all headers and put it into an array
    if($check) {

        $inputFileType = 'Excel5';
        $inputFileType = PHPExcel_IOFactory::identify($f);
        $objReader = PHPExcel_IOFactory::createReader($inputFileType);
        $objPHPExcel = $objReader->load($f);

        $cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
        //extract to a PHP readable array format
        foreach ($cell_collection as $cell) {
            $column = $objPHPExcel->getActiveSheet()->getCell($cell)->getColumn();
            $row = $objPHPExcel->getActiveSheet()->getCell($cell)->getRow();
            $data_value = $objPHPExcel->getActiveSheet()->getCell($cell)->getValue();
            //header will/should be in row 1 only. of course this can be modified to suit your need.
            if ($row == 1) {
                $header[$row][$column] = rtrim($data_value);
            } else {
                $arr_data[$row][$column] = rtrim($data_value);
            }
        }

        //send the data in an array format
        $data['header'] = $header;
        $data['values'] = $arr_data;

        return $data;

    }
}

/**
 * Implements hook_form_submit()
 * - Remove old file
 * - Save new file into the database
 * - Callback to import_csv() to perform the import
 */
function gfa_feed_document_submit($form, $form_state) {
    if (isset($form_state['values']['doc_file'])) {
        //remove existing document while clicking remove button
        if ($form_state['values']['doc_file'] == 0) {
            //get existing file id to delete
            $document_exist_id = variable_get('document_variable_name');
            $document_exist_file = file_load($document_exist);
            if (!empty($document_exist_file)) {
                //delete file usage
                file_usage_delete($document_exist_file, 'gfa_feed', '', $document_exist_id);
                // The file_delete() function takes a file object and checks to see if
                // the file is being used by any other modules. If it is the delete
                // operation is canceled, otherwise the file is deleted.
                file_delete($document_exist_file, TRUE);
                drupal_set_message(t('Old document removed.'));
            }
        } else {
            //adding document
            $current_document = file_load($form_state['values']['doc_file']);
            if (!empty($current_document->fid)) {
                //get currently uploaded file id
                $file_id = $current_document->fid;
                //setting file id to its variable
                variable_set('document_variable_name', $file_id);
                file_usage_add($current_document, 'gfa_feed', '', $file_id);
                //make file status as permanent
                $current_document->status = FILE_STATUS_PERMANENT;
                $fid = $current_document->fid;
//                ddl($fid);
                //pass the URL second argument bc its the uploader name and also the field name we should be checking
                //the header against
//dpm($fid);
                $check = import_header(arg(1),$fid);
//                ddl($check);
                if($check){
                    file_save($current_document);
                    import_csv(arg(1), $fid);
                    drupal_set_message("Documents uploaded successfully.");
                } else {
                    form_set_error('error','The file could not be uploaded. Please use the correct template');
                }

            }
        }
    }
}

/**
 * Implements hook_form()
 * Generate a form to switch between upload csv types.
 */
function adj_select_form($form, &$form_state) {
    $form = array();

    $options = array(
        'mnat' => 'CPA - MB2 Net Accrual TV',
        'cparn' => 'CPA - RADAR Net Accrual TV',
        'cparf' => 'CPA - RADAR Format GFA',
        'cpag' => 'Current Period Accruals - GFA',
        'ppa' => 'Prior Period Adjustments',
        'pppece' => 'Prior Period PE to CE',
        'shbp' => 'SHB Perdiem'
    );
    $form['adjtype'] = array(
        '#attributes' => array('id' => array('arg2')),
        '#type' => 'select',
        '#title' => t('Adjustment type'),
        '#description' => t('Choose the export form type.'),
        '#default_value' => arg(1),
        '#options' => $options
    );
    $form['submit']     = array(
        '#type' => 'submit',
        '#value' => t('Apply')
    );
    return $form;
}

/**
 * Adjtype select form submit function.
 */
function adj_select_form_submit($form, &$form_state) {
    $adjtype = $form_state['values']['adjtype'];
    drupal_goto('/upload/' . $adjtype);
}


function gfa_feed_feeds_presave($source, $entity, $item, $entity_id) {
////dpm($item);
//    if(empty($entity->field_fmno['und'][0]['value'])){
//        drupal_set_message("FMNO field is required");
//        $entity->feeds_item->skip = TRUE;
//        $entity->field_fcuid['und'][0]['value'] = $entity->feeds_item->hash;
//    }
//
//    if(empty($item['FMNO'])){
//        drupal_set_message("ITEM FMNO REquired");
//    }

}

function gfa_feed_upload_process($element, &$form_state, $form){
//    ddl($form_state);
//    ddl($element);
}

function gfa_feed_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
    foreach($result->items as $key => $row) {
//        ddl($row);
        $row['PROJECT NAME'] = "MY NAME IS HERE";
    }
}




/**
 * Changing field_my_plaintext field from string(plain text) to text(formatted).
 */
function mymodule_update_8006() {

    $fields = [
        'field_fmno' => [
            'table' => 'field_data_field_fmno',
            'revision_table' => 'field_revision_field_fmno',
            'format_col' => 'field_fmno_format',
        ],
    ];

    $database = \Drupal::database();

    foreach ($fields as $field_name => $f) {
        $table = $f['table'];
        $revision_table = $f['revision_table'];
        // Entity type here.
        $entity_type = 'paragraph';

        // Step 1: Get field storage.
        $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);

        // Check if field not found.
        if (is_null($field_storage)) {
            continue;
        }

        // Step 2: Store data.
        $rows = NULL;
        $revision_rows = NULL;
        if ($database->schema()->tableExists($table)) {
            // The table data to restore after the update is completed.
            $rows = $database->select($table, 'n')->fields('n')->execute()
                ->fetchAll();
            $revision_rows = $database->select($revision_table, 'n')->fields('n')->execute()
                ->fetchAll();
        }

        // Step 3: Save new field configs & delete existing fields.
        $new_fields = array();
        foreach ($field_storage->getBundles() as $bundle => $label) {
            $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
            $new_field = $field->toArray();
            $new_field['field_type'] = 'text';
            $new_fields[] = $new_field;
            // Delete field.
            $field->delete();
        }

        // Step 4: Create new storage configs from existing.
        $new_field_storage = $field_storage->toArray();
        $new_field_storage['type'] = 'text';
        $new_field_storage['module'] = 'text';
        $new_field_storage['settings'] = [
            'max_length' => 255,
        ];

        // Step 5: Purge deleted fields data.
        // This is required to create new fields.
        field_purge_batch(250);

        // Step 6: Create new fieldstorage.
        FieldStorageConfig::create($new_field_storage)->save();

        // Step 7: Create new fields for all bundles.
        foreach ($new_fields as $new_field) {
            $new_field = FieldConfig::create($new_field);
            $new_field->save();
        }

        // Step 8: Restore existing data in fields & revision tables.
        if (!is_null($rows)) {
            foreach ($rows as $row) {
                $row = (array) $row;
                $row[$f['format_col']] = 'static_html';
                $database->insert($table)->fields($row)->execute();
            }
        }
        if (!is_null($revision_rows)) {
            foreach ($revision_rows as $row) {
                $row = (array) $row;
                $row[$f['format_col']] = 'static_html';
                $database->insert($revision_table)->fields($row)->execute();
            }
        }

    }

}
